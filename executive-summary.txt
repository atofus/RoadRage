Assignment name: Road Rage
TCSS 305 C: Programming Practicum


Name: Alan To
UWNetID: ato7


Assignment Overview:
Definitely the biggest assignment thus far for us, there were many things that we had to do. With us having to do
and consider much more, this assignment served many purposes such as getting more practice on inheritance and writing
parent and child classes. Also working with a GUI again, we were able to get some more information on how that kind of
worked in class and in the assignment description. This assignment also allowed us to practice more JUNIT testing and
of course it required a lot of problem-solving skills. In fact, it required a lot more problem-solving compared
to previous assignments with how to make the vehicles move.


Technical Impression:
To complete this assignment, I first read through the whole assignment description to get a feel for it. Once doing that,
the first class I knew I needed to get finished was the AbstractVehicle class. Using the hints and tips given to me
in the assignment description, I had finished the AbstractVehicle class in probably 1 and a half hour. To make sure my
abstract class was correct, in one of the lectures, we were shown what the abstract class should look like, in which I was
able to go through it and check everything. Now, beginning on the truck class, I already had an idea on what to do for the
canPass method, but was confused on what to do for the chooseDirection method. Not really understanding how to look at
what terrain is around the truck, I decided to look at the assignment.pdf description and the example given there under
the chooseDirection method really helped me out. But for the truck and how it's supposed to move, I was confused for a
good bit. For about a day of frustration, the solution I got was to create a list that should store all the possible
directions we can go towards. After putting it in that list of all possible directions, we should then go in that list
that's filled with all the possible directions and get a random index from that list. This worked, but check style doesn't
really like it. Because I don't really have any other solutions and this one made sense to me the most, I kept it.
Moving onto the taxi and car class, I just used if and else methods for these 2 classes. However, the thing that
frustrated me the most was probably the canPass method for the taxi. In the description it says that when a taxi is at a
crosswalk during a red light, it can move again after 3 clock cycles. Understanding that, I at first tried to initialize
the clock cycle to 0 in the method itself, but that didn't seem to work. Getting confused on why it wasn't working, I
then chose to create fields for the clock cycle counter and the number were supposed to get to (3), and that seem to do
the job. For the Atv vehicle class, the canPass was pretty simple to do. However, the chooseDirection method was a
bit harder. It's said that the Atv is random and cannot reverse or go on the wall terrain. So what I did was that if
there's a wall in front or what was chosen in the Direction.random was reverse, we would want to keep choosing a different
random direction until it's not facing a wall or reversing. To do this, what I used was a while loop. For the bicycle vehicle
class, I did pretty much the same thing as I did with the taxi and car chooseDirection methods. Lastly, the human class, it
was actually the second vehicle class I finished. The reason why I did this before the other vehicle classes was because I
wanted to use the test that was given out to us right away to make sure everything was correct. For this class, I did something
similar to the truck class in which I had a list of possible directions it could go. However, this object was different because
it had to face a crosswalk if a crosswalk was near it. To do this, what I did was return right away if this was the case.
This led me to have multiple return statements. Once finishing every vehicle class, I then got onto doing my Truck unit
testing. The things I tested were the truck setters, getters, seeing if it can reverse, and seeing if the truck chooses
to look at the right terrain. Kind of going off how the human test was done and what was given to me, my truck was
able to pass everything! Overall, this assignment got me thinking a lot and while my code might not be the cleanest,
I still enjoyed doing this assignment!

Unresolved problems in my submission:
'The only problem I have in my submission that I'm aware of is the check style in the Truck class. Other than that
I'm not aware of any bugs in my code.'

(Use this space to list problems which you know exist in your submission. This could 
include program features which you did not have time to implement, bugs in your code, 
warnings generated by the tools which you did not understand or did not have time to correct, 
or other issues. I give a reduced grade penalty for problems which I find in your submission 
that are listed here and a larger penalty for those which are not. Just say 'none' if 
there are no issues that you are aware of.) 


Citations and Collaborations:
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/package-summary.html
https://stackoverflow.com/questions/20058366/shuffle-a-list-of-integers-with-java-8-streams-api

In-person lectures:
https://washington.zoom.us/rec/play/xi4hp5mbu9i3STyx5LhmOGiDIC-b_MMW7cJ00FbqnfXKB5c_cvkPqzj2ckZCfSZCLXc_MgSdZ6ydarOO.0N-7LnpWC7x5cIeU
https://washington.zoom.us/rec/play/bQ1IhCXUFtYqFs2ODZWiXkukUaNVJuWjKPciBZE-lnnaVcVA98Bz6H0TQKYYVQKaM9-WufboSUKm4MIW.nPqqx_Rzgq0cpa8o


Extra credit:
I actually tried to attempt the extra credit problem with the truck class object. You could see my attempt below at the
bottom of the chooseDirection method and seen in the abstract vehicle class with the return stream method. Doing some research
on the Java API for stream, while I did somewhat understand what I had to do with the stream, I just didn't know how get the stream
list to shuffle or randomize the direction it faces. Because of that, I kind of just gave up with the extra credit. :(


Questions:
'none'
